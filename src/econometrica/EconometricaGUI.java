/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package econometrica;

import databaseClasses.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.jfree.ui.RefineryUtilities;


/**
 *
 * @author ΧΡΗΣΤΟΣ ΜΠΑΡΜΠΑΣ - 084233
 * @author ΤΣΟΥΚΑΛΑΣ ΠΑΝΑΓΙΩΤΗΣ - 128374
 * @author ΧΑΤΖΗΚΥΡΙΑΚΙΔΟΥ ΚΥΡΙΑΚΗ - 100336
 */
public class EconometricaGUI extends javax.swing.JFrame {
    
    protected ControllerGUI controller;
    
    String countryName = ""; 
    String isocode;
    Country country;            //ΑΝΤΙΚΕΙΜΕΝΟ Country
    CountryDataset cDataset;    //ΑΝΤΙΚΕΙΜΕΝΟ CountryDataset
    List<CountryDataset> cDatasets; //ΛΙΣΤΑ ΜΕ ΤΑ CountryDatasets ΤΗΣ ΧΩΡΑΣ
    List<CountryData> allCountryData; //ΛΙΣΤΑ ΜΕ ΟΛΑ ΤΑ CountryData ΤΗΣ ΧΩΡΑΣ
    
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    private PlotMaker plot;
    
    /**
     * Creates new form EconometricaGUI
     */
    public EconometricaGUI() {

        //ΔΗΜΙΟΥΡΓΙΑ GUI CONTROLLER
        controller = new ControllerGUI();
        
        initComponents(); 
              
        //ΠΡΟΣΘΗΚΗ Listener ΓΙΑ ΕΛΕΓΧΟ ΤΟΥ ΚΟΥΜΠΙΟΥ ΚΛΕΙΣΙΜΑΤΟΣ
        //ΤΟΥ ΚΕΝΤΡΙΚΟΥ ΠΑΡΑΘΥΡΟΥ
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                //ΚΛΗΣΗ ΜΕΘΟΔΟΥ ΕΠΙΛΟΓΗΣ ΓΙΑ ΕΞΟΔΟ ΑΠΟ ΕΦΑΡΜΟΓΗ 
                ExitOnCloseOption();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        countrySelectjLabel = new javax.swing.JLabel();
        fetchDatajButton = new javax.swing.JButton();
        oilDatajLabel = new javax.swing.JLabel();
        oilDatasetNameTitlejLabel = new javax.swing.JLabel();
        gdpDatajLabel = new javax.swing.JLabel();
        gdpDatasetNameTitlejLabel = new javax.swing.JLabel();
        oilDatasetNamejlabel = new javax.swing.JLabel();
        gdpDatasetNamejlabel = new javax.swing.JLabel();
        avTimespanjLabel = new javax.swing.JLabel();
        avTimespanjLabel1 = new javax.swing.JLabel();
        oilStartDateTitlejLabel = new javax.swing.JLabel();
        gdpStartDateTitlejLabel = new javax.swing.JLabel();
        oilEndDateTitlejLabel = new javax.swing.JLabel();
        gdpEndDateTitlejLabel = new javax.swing.JLabel();
        oilStartDatejlabel = new javax.swing.JLabel();
        oilEndDatejlabel = new javax.swing.JLabel();
        gdpStartDatejlabel = new javax.swing.JLabel();
        gdpEndDatejlabel = new javax.swing.JLabel();
        savejButton = new javax.swing.JButton();
        plotjButton = new javax.swing.JButton();
        deleteAlljButton = new javax.swing.JButton();
        alreadySavedjCheckBox = new javax.swing.JCheckBox();
        countryjComboBox = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        oilDatajTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        gdpDatajTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Econometrica");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        countrySelectjLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        countrySelectjLabel.setText("Select Country:");

        fetchDatajButton.setText("Fetch Data");
        fetchDatajButton.setToolTipText("Αναζήτηση δεδομένων");
        fetchDatajButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fetchDatajButtonMouseClicked(evt);
            }
        });
        fetchDatajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchDatajButtonActionPerformed(evt);
            }
        });

        oilDatajLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        oilDatajLabel.setText("OIL DATA");

        oilDatasetNameTitlejLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        oilDatasetNameTitlejLabel.setText("Dataset Name");

        gdpDatajLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        gdpDatajLabel.setText("GDP DATA");

        gdpDatasetNameTitlejLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        gdpDatasetNameTitlejLabel.setText("Dataset Name");

        oilDatasetNamejlabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        oilDatasetNamejlabel.setText("-");

        gdpDatasetNamejlabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        gdpDatasetNamejlabel.setText("-");

        avTimespanjLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        avTimespanjLabel.setText("Available Timespan:");

        avTimespanjLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        avTimespanjLabel1.setText("Available Timespan:");

        oilStartDateTitlejLabel.setText("Start Date:");

        gdpStartDateTitlejLabel.setText("Start Date:");

        oilEndDateTitlejLabel.setText("End Date:");

        gdpEndDateTitlejLabel.setText("End Date:");

        oilStartDatejlabel.setText("-");

        oilEndDatejlabel.setText("-");

        gdpStartDatejlabel.setText("-");

        gdpEndDatejlabel.setText("-");

        savejButton.setText("Save");
        savejButton.setToolTipText("Αποθήκευση");
        savejButton.setEnabled(false);
        savejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savejButtonActionPerformed(evt);
            }
        });

        plotjButton.setText("Plot");
        plotjButton.setToolTipText("Προβολή διαγράμματος");
        plotjButton.setEnabled(false);
        plotjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotjButtonActionPerformed(evt);
            }
        });

        deleteAlljButton.setText("DELETE ALL");
        deleteAlljButton.setToolTipText("Διαγραφή όλων των δεδομένων από τη βάση");
        deleteAlljButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteAlljButtonMouseClicked(evt);
            }
        });
        deleteAlljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAlljButtonActionPerformed(evt);
            }
        });
        //ΕΝΕΡΓΟΠΟΙΗΣΗ ΚΟΥΜΠΙΟΥ deleteAlljButton ΜΌΝΟ ΑΝ ΥΠΑΡΧΟΥΝ ΔΕΔΟΜΕΝΑ ΣΤΗ ΒΑΣΗ
        if(controller.EmptyDB()){deleteAlljButton.setEnabled(false);
        }else{deleteAlljButton.setEnabled(true);}

        alreadySavedjCheckBox.setText("Already Saved to Database");
        alreadySavedjCheckBox.setEnabled(false);
        alreadySavedjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alreadySavedjCheckBoxActionPerformed(evt);
            }
        });

        countryjComboBox.setToolTipText("Επιλογή χώρας");
        //ΦΟΡΤΩΣΗ ΔΕΔΟΜΕΝΩΝ ΣΤΟ JComboBox
        countryjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(controller.getCountries()));
        countryjComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                countryjComboBoxItemStateChanged(evt);
            }
        });
        countryjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryjComboBoxActionPerformed(evt);
            }
        });

        oilDatajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        oilDatajTable.setEnabled(false);
        oilDatajTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(oilDatajTable);
        if (oilDatajTable.getColumnModel().getColumnCount() > 0) {
            oilDatajTable.getColumnModel().getColumn(0).setResizable(false);
            oilDatajTable.getColumnModel().getColumn(1).setResizable(false);
        }

        gdpDatajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gdpDatajTable.setEnabled(false);
        gdpDatajTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(gdpDatajTable);
        if (gdpDatajTable.getColumnModel().getColumnCount() > 0) {
            gdpDatajTable.getColumnModel().getColumn(0).setResizable(false);
            gdpDatajTable.getColumnModel().getColumn(1).setResizable(false);
        }
        //ΑΡΧΙΚΗ ΚΕΝΤΡΙΚΗ ΣΤΟΙΧΙΣΗ JTABLES
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        for(int i=0; i<2; i++){
            oilDatajTable.getColumnModel().getColumn(i).setHeaderRenderer(centerRenderer);
            oilDatajTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            gdpDatajTable.getColumnModel().getColumn(i).setHeaderRenderer(centerRenderer);
            gdpDatajTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(countrySelectjLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(oilEndDateTitlejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(oilStartDateTitlejLabel))
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(oilStartDatejlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                    .addComponent(oilEndDatejlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(avTimespanjLabel)
                            .addComponent(oilDatasetNamejlabel)
                            .addComponent(oilDatasetNameTitlejLabel)
                            .addComponent(oilDatajLabel))
                        .addGap(160, 160, 160)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gdpDatasetNameTitlejLabel)
                            .addComponent(gdpDatajLabel)
                            .addComponent(gdpDatasetNamejlabel)
                            .addComponent(avTimespanjLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(gdpEndDateTitlejLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(gdpEndDatejlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(gdpStartDateTitlejLabel)
                                    .addGap(77, 77, 77)
                                    .addComponent(gdpStartDatejlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(savejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(plotjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(deleteAlljButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(alreadySavedjCheckBox))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(27, 27, 27)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(countryjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(31, 31, 31)
                            .addComponent(fetchDatajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(countrySelectjLabel)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fetchDatajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oilDatajLabel)
                    .addComponent(gdpDatajLabel))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oilDatasetNameTitlejLabel)
                    .addComponent(gdpDatasetNameTitlejLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oilDatasetNamejlabel)
                    .addComponent(gdpDatasetNamejlabel))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avTimespanjLabel)
                    .addComponent(avTimespanjLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oilStartDateTitlejLabel)
                    .addComponent(gdpStartDateTitlejLabel)
                    .addComponent(oilStartDatejlabel)
                    .addComponent(gdpStartDatejlabel))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oilEndDateTitlejLabel)
                    .addComponent(gdpEndDateTitlejLabel)
                    .addComponent(oilEndDatejlabel)
                    .addComponent(gdpEndDatejlabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deleteAlljButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(alreadySavedjCheckBox))
                    .addComponent(savejButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(plotjButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void savejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savejButtonActionPerformed
        
        //ΕΜΦΑΝΙΣΗ ΠΑΡΑΘΥΡΟΥ ΕΠΙΒΕΒΑΙΩΣΗΣ ΑΠΟΘΗΚΕΥΣΗΣ
        int response = JOptionPane.showConfirmDialog(this, "Θέλετε να αποθηκεύσετε "
                + "τα δεδομένα για την χώρα " + country.getName() +"? \n ", "Αποθήκευση", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        //ΕΝΕΡΓΕΙΕΣ ΜΕ ΒΑΣΗ ΤΗΝ ΕΠΙΛΟΓΗ ΤΟΥ ΧΡΗΣΤΗ
        if(response == JOptionPane.OK_OPTION){              //ΕΠΙΛΟΓΗ ΟΚ
            controller.insertDataToCountry(country);
            controller.insertDatasetsToCountryDataset(cDatasets);
            controller.insertDataToCountryData(allCountryData);
            System.out.println("<-- Επιτυχής αποθήκευση δεδομένων για την χώρα: " + country.getName());
        }else if (response == JOptionPane.CANCEL_OPTION){   //ΕΠΙΛΟΓΗ CANCEL
        }else if (response == JOptionPane.CLOSED_OPTION){   //ΕΠΙΛΟΓΗ ΕΞΟΔΟΥ JOPTION
        }
        
        //ΑΠΕΝΕΡΓΟΠΟΙΕΙ ΤΟ ΚΟΥΜΠΙ savejButton
        savejButton.setEnabled(false);
        //ΕΠΙΛΟΓΗ alreadySavedjCheckBox
        alreadySavedjCheckBox.setSelected(true);
        //ΕΝΕΡΓΟΠΟΙΗΣΗ ΚΟΥΜΠΙΟΥ deleteAlljButton 
        deleteAlljButton.setEnabled(true);
    }//GEN-LAST:event_savejButtonActionPerformed

    private void countryjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryjComboBoxActionPerformed
        //ΑΝ ΔΕΝ ΕΠΙΛΕΧΘΕΙ Η ΙΔΙΑ ΧΩΡΑ ΞΑΝΑ ΚΑΙ ΑΝ Η ΕΠΙΛΟΓΗ ΧΩΡΑΣ ΔΕΝ ΕΙΝΑΙ ΚΕΝΗ
        if(!countryName.equals(countryjComboBox.getSelectedItem().toString()) && !countryName.equals("")){
            //ΕΝΕΡΓΟΠΟΙΗΣΗ fetchDatajButton
            fetchDatajButton.setEnabled(true);
        }

    }//GEN-LAST:event_countryjComboBoxActionPerformed
    
    private void fetchDatajButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fetchDatajButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_fetchDatajButtonMouseClicked

    private void countryjComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_countryjComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_countryjComboBoxItemStateChanged

    private void alreadySavedjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alreadySavedjCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_alreadySavedjCheckBoxActionPerformed

    private void deleteAlljButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteAlljButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteAlljButtonMouseClicked

    private void fetchDatajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchDatajButtonActionPerformed
        
      
        //ΚΑΤΑΧΩΡΗΣΗ ΕΠΙΛΟΓΗΣ countryjComboBox ΣΕ ΜΕΤΑΒΛΗΤΗ
        countryName = countryjComboBox.getSelectedItem().toString();
        
        //ΟΤΑΝ ΕΠΙΛΕΧΘΕΙ ΜΙΑ ΧΩΡΑ
        if(!countryName.equals("Choose a country")){
            //ΑΠΕΝΕΡΓΟΠΟΙΗΣΗ fetchDatajButton
            fetchDatajButton.setEnabled(false);
            //ΑΡΧΙΚΟΠΟΙΗΣΗ ΤΩΝ JTables - ΑΔΕΙΑΣΜΑ
            oilDatajTable.setModel(new DefaultTableModel(null, new String[]{"Year", "Value"}));
            gdpDatajTable.setModel(new DefaultTableModel(null, new String[]{"Year", "Value"}));  
            
            //ΒΡΙΣΚΟΥΜΕ ΤΟ ΑΝΤΙΣΤΟΙΧΟ Alpha3 isocode
            isocode = controller.getIsocodeOfCountry(countryjComboBox.getSelectedItem().toString());
            
            //ΔΗΜΙΟΥΡΓΙΑ ΛΙΣΤΩΝ ΓΙΑ ΧΡΗΣΗ
            allCountryData = new ArrayList<>();
            cDatasets = new ArrayList<>();
            
            //ΔΗΜΙΟΥΡΓΙΑ ΑΝΤΙΚΕΙΜΕΝΩΝ ΤΥΠΟΥ DefaultTableModel
            DefaultTableModel model_oil = (DefaultTableModel)oilDatajTable.getModel();
            DefaultTableModel model_gdp = (DefaultTableModel)gdpDatajTable.getModel();
            
            //ΔΗΜΙΟΥΡΓΙΑ ΑΝΤΙΚΕΙΜΕΝΟΥ Country
            country = new Country(isocode, countryName);
              
            //ΑΝ ΔΕΝ ΥΠΑΡΧΕΙ ΚΑΤΑΧΩΡΗΜΕΝΗ ΕΓΓΡΑΦΗ ΣΤΗ ΒΑΣΗ ΓΙΑ ΤΗΝ ΕΠΙΛΕΓΜΕΝΗ ΧΩΡΑ
            if(!controller.FindInDbByIsocode(isocode)){
 
                //ΔΗΜΙΟΥΡΓΙΑ RESTEndpoints
                QuandlAPI call = new QuandlAPI(isocode);
                String restEndpoint_oil = call.OilConsumption_quandlCall();
                String restEndpoint_gdp = call.GDP_quandlCall();
                               
                String year, value;
                
                //ΔΗΜΙΥΡΓΙΑ ΑΝΤΙΚΕΙΜΕΝΟΥ JSONREAD ΓΙΑ ΔΙΑΧΕΙΡΙΣΗ json string
                JsonRead jsonread = new JsonRead();
                
                int i=0;
                //ΕΜΦΑΝΙΣΗ ΣΤΟΙΧΕΙΩΝ ΣΤΟ GUI ΓΙΑ OIL CONSUMPTION
                //ΠΕΡΙΠΤΩΣΗ ΠΟΥ ΥΠΑΡΧΕΙ ΔΙΑΘΕΣΙΜΟ Dataset
                if(restEndpoint_oil != null){
                    cDataset = jsonread.GetDataFromJson(restEndpoint_oil, country);
                    oilDatasetNamejlabel.setText(jsonread.datasetInfo.get(0));
                    oilStartDatejlabel.setText(jsonread.datasetInfo.get(1));
                    oilEndDatejlabel.setText(jsonread.datasetInfo.get(2));
                    
                    for(i=0; i<jsonread.allData.size(); i++){
                        year = jsonread.allData.get(i).getDataYear();
                        value = jsonread.allData.get(i).getValue();
                        model_oil.addRow(new Object[]{year, value});
                    }
                    
                    //ΠΡΟΣΘΗΚΗ DATASET ΣΤΗ ΛΙΣΤΑ ΤΩΝ CountryDatasets ΤΗΣ ΧΩΡΑΣ
                    cDatasets.add(cDataset);
                    
                } else {    //ΠΕΡΙΠΤΩΣΗ ΠΟΥ ΔΕΝ ΥΠΑΡΧΕΙ ΔΙΑΘΕΣΙΜΟ Dataset
                    oilDatasetNamejlabel.setText("Not available data.");
                    oilStartDatejlabel.setText("-");
                    oilEndDatejlabel.setText("-");
                }  
                
                //ΕΜΦΑΝΙΣΗ ΣΤΟΙΧΕΙΩΝ ΣΤΟ GUI ΓΙΑ GDP
                //ΠΕΡΙΠΤΩΣΗ ΠΟΥ ΥΠΑΡΧΕΙ ΔΙΑΘΕΣΙΜΟ Dataset
                if(restEndpoint_gdp != null){
                    cDataset = jsonread.GetDataFromJson(restEndpoint_gdp, country);
                    gdpDatasetNamejlabel.setText(jsonread.datasetInfo.get(0));
                    gdpStartDatejlabel.setText(jsonread.datasetInfo.get(1));
                    gdpEndDatejlabel.setText(jsonread.datasetInfo.get(2));
                    
                    for(int j=i; j<jsonread.allData.size(); j++){
                        year = jsonread.allData.get(j).getDataYear();
                        value = jsonread.allData.get(j).getValue();
                        model_gdp.addRow(new Object[]{year, value});
                    }
                    
                    //ΠΡΟΣΘΗΚΗ DATASET ΣΤΗ ΛΙΣΤΑ ΤΩΝ CountryDatasets ΤΗΣ ΧΩΡΑΣ
                    cDatasets.add(cDataset);
                    
                } else {    //ΠΕΡΙΠΤΩΣΗ ΠΟΥ ΔΕΝ ΥΠΑΡΧΕΙ ΔΙΑΘΕΣΙΜΟ Dataset
                    gdpDatasetNamejlabel.setText("Not available data.");
                    gdpStartDatejlabel.setText("-");
                    gdpEndDatejlabel.setText("-");
                } 
                
                //ΚΑΤΑΧΩΡΗΣΗ ΟΛΩΝ ΤΩΝ ΔΕΔΟΜΕΝΩΝ ΓΙΑ OIL CONSUMPTIOΝ KAI GDP ΣΕ 
                //ΤΟΠΙΚΗ ΛΙΣΤΑ ΜΕ ΣΚΟΠΟ ΤΗ ΧΡΗΣΗ ΤΗΣ ΓΙΑ ΤΗΝ ΑΠΟΘΗΚΕΥΣΗ ΤΟΥΣ 
                allCountryData = jsonread.allData;
                //ΕΝΕΡΓΟΠΟΙΕΙ ΤΟ ΚΟΥΜΠΙ savejButton ΚΑΙ ΤΟ ΚΟΥΜΠΙ plotjButton
                //ΜΟΝΟ ΑΝ ΥΠΑΡΧΕΙ ΤΟΥΛΑΧΙΣΤΟΝ ΕΝΑ ΔΙΑΘΕΣΙΜΟ DATASET 
                if(restEndpoint_oil != null || restEndpoint_gdp != null){
                    savejButton.setEnabled(true);
                    plotjButton.setEnabled(true);
                }else{
                    savejButton.setEnabled(false);
                    plotjButton.setEnabled(false);
                }             
                //ΑΠΕΠΙΛΟΓΗ alreadySavedjCheckBox
                alreadySavedjCheckBox.setSelected(false);
                              
            }else{   //ΑΝ ΥΠΑΡΧΟΥΝ ΗΔΗ ΔΕΔΟΜΕΝΑ ΣΤΗ ΒΑΣΗ
                //ΑΠΕΝΕΡΓΟΠΟΙΕΙ ΤΟ ΚΟΥΜΠΙ savejButton
                savejButton.setEnabled(false);
                //ΕΝΕΡΓΟΠΟΙΕΙ ΤΟ ΚΟΥΜΠΙ plotjButton
                plotjButton.setEnabled(true);
                //ΣΗΜΕΙΩΣΗ ΕΝΔΕΙΞΗΣ ΓΙΑ ΗΔΗ ΑΠΟΘΗΚΕΥΜΕΝΑ ΔΕΔΟΜΕΝΑ ΣΤΗ ΒΑΣΗ
                alreadySavedjCheckBox.setSelected(true);
                //ΑΡΧΙΚΟΠΟΙΗΣΗ ΤΩΝ labels ΤΩΝ datasets
                oilDatasetNamejlabel.setText("-");
                oilStartDatejlabel.setText("-");
                oilEndDatejlabel.setText("-");                 
                System.out.println("--> Επιτυχής ανάκτηση δεδομένων από τη βάση για την χώρα: "+ country.getName());
                
                //ΕΥΡΕΣΗ Datasets ΜΕ ΒΑΣΗ ΤΟ country ΑΠΟ ΤΟΝ ΠΙΝΑΚΑ COUNTRY_DATASET
                cDatasets = controller.FindCountryDatasets(country);
                //ΛΙΣΤΑ ΓΙΑ ΤΗΡΗΣΗ ΟΛΩΝ ΤΩΝ ΑΝΤΙΚΕΙΜΕΝΩΝ CountryData ΣΥΓΚΕΝΤΡΩΤΙΚΑ 
                   //ΓΙΑ ΟΛΑ ΤΑ ΑΠΟΘΗΚΕΥΜΕΝΑ DATASETS  
                   allCountryData = new ArrayList<>();
                   
                //ΓΙΑ ΚΑΘΕ dataset ΕΜΦΑΝΙΖΕΙ ΤΑ ΣΤΟΙΧΕΙΑ ΤΟΥ
                for (int i = 0; i<cDatasets.size(); i++){                   
                    //ΛΙΣΤΑ ΑΝΤΙΚΕΙΜΕΝΩΝ CountryData ΓΙΑ ΤΟ ΚΑΘΕ DATASET 
                    List<CountryData> allCountryData1;
                    if(cDatasets.get(i).getName().startsWith("Oil")){
                        oilDatasetNamejlabel.setText(cDatasets.get(i).getName());
                        oilStartDatejlabel.setText(cDatasets.get(i).getStartYear() + "-12-31");
                        oilEndDatejlabel.setText(cDatasets.get(i).getEndYear() + "-12-31");  
                        //ΓΙΑ ΚΑΘΕ data record ΤΟΥ oilDataset ΕΜΦΑΝΙΖΕΙ ΤΑ ΣΤΟΙΧΕΙΑ ΤΟΥ
                        allCountryData1 = controller.FindCountryData(cDatasets.get(i));
                        for (int j = 0; j<allCountryData1.size(); j++){
                            model_oil.addRow(new Object[]{allCountryData1.get(j).getDataYear(), allCountryData1.get(j).getValue()});                            
                            allCountryData.add(allCountryData1.get(j));
                        }
                    }else{
                        gdpDatasetNamejlabel.setText(cDatasets.get(i).getName());
                        gdpStartDatejlabel.setText(cDatasets.get(i).getStartYear() + "-12-31");
                        gdpEndDatejlabel.setText(cDatasets.get(i).getEndYear() + "-12-31");
                        //ΓΙΑ ΚΑΘΕ data record ΤΟΥ gdpDataset ΕΜΦΑΝΙΖΕΙ ΤΑ ΣΤΟΙΧΕΙΑ ΤΟΥ
                        allCountryData1 = controller.FindCountryData(cDatasets.get(i));
                        for (int j = 0; j<allCountryData1.size(); j++){
                            model_gdp.addRow(new Object[]{allCountryData1.get(j).getDataYear(), allCountryData1.get(j).getValue()});
                            allCountryData.add(allCountryData1.get(j));
                        }                       
                    }   
                }
               
                //ΑΝ ΔΕΝ ΕΧΟΥΝ ΒΡΕΘΕΙ ΤΑ ΑΝΤΙΣΤΟΙΧΑ datasets
                if(oilDatasetNamejlabel.getText().equals("-")){
                    oilDatasetNamejlabel.setText("Not available data.");
                    oilStartDatejlabel.setText("-");
                    oilEndDatejlabel.setText("-");                      
                }
                if(gdpDatasetNamejlabel.getText().equals("-")){
                    gdpDatasetNamejlabel.setText("Not available data.");
                    gdpStartDatejlabel.setText("-");
                    gdpEndDatejlabel.setText("-");
                }                
            }
            
        }else{   //ΑΝ ΔΕΝ ΕΧΕΙ ΕΠΙΛΕΧΘΕΙ ΧΩΡΑ
            JOptionPane.showMessageDialog(this, "Επιλέξτε πρώτα μία χώρα.", 
                    "Σφάλμα", JOptionPane.ERROR_MESSAGE);
        }
        
        //ΚΕΝΤΡΙΚΗ ΣΤΟΙΧΙΣΗ JTABLES 
        for(int i=0; i<2; i++){
            oilDatajTable.getColumnModel().getColumn(i).setHeaderRenderer(centerRenderer);
            oilDatajTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            gdpDatajTable.getColumnModel().getColumn(i).setHeaderRenderer(centerRenderer);
            gdpDatajTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        
    }//GEN-LAST:event_fetchDatajButtonActionPerformed

    private void deleteAlljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAlljButtonActionPerformed
        //ΕΜΦΑΝΙΣΗ ΠΑΡΑΘΥΡΟΥ ΕΠΙΒΕΒΑΙΩΣΗΣ ΔΙΑΓΡΑΦΗΣ ΔΕΔΟΜΕΝΩΝ ΒΑΣΗΣ
        int response = JOptionPane.showConfirmDialog(this, "Θέλετε να διαγράψετε όλα "
                + "τα δεδομένα από τη βάση? \n ", "Διαγραφή δεδομένων", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        //ΕΝΕΡΓΕΙΕΣ ΜΕ ΒΑΣΗ ΤΗΝ ΕΠΙΛΟΓΗ ΤΟΥ ΧΡΗΣΤΗ
        if(response == JOptionPane.OK_OPTION){              //ΕΠΙΛΟΓΗ ΟΚ
            controller.clearTables();
            System.out.println("------------------------------------------------"
                    + "----------------------------");
            System.out.println("ΔΙΑΓΡΑΦΗ ΟΛΩΝ ΤΩΝ ΔΕΔΟΜΕΝΩΝ ΑΠΟ ΤΟΥΣ ΠΙΝΑΚΕΣ - "
                    + "Η ΒΑΣΗ ΔΕΔΟΜΕΝΩΝ ΕΙΝΑΙ ΑΔΕΙΑ!");  
            System.out.println("------------------------------------------------"
                    + "----------------------------");
          
            JOptionPane.showMessageDialog(this, "Όλα τα δεδομένα διαγράφηκαν από "
                    + "τη βάση.\nΗ ΒΑΣΗ ΔΕΔΟΜΕΝΩΝ ΕΙΝΑΙ ΑΔΕΙΑ!", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE); 
            //ΑΠΕΝΕΡΓΟΠΟΙΗΣΗ ΚΟΥΜΠΙΟΥ deleteAlljButton
            deleteAlljButton.setEnabled(false);
            //ΑΝΑΝΕΩΣΗ ΔΕΔΟΜΕΝΩΝ  
            if(!countryName.equals("Choose a country") && !countryName.equals("")){
                fetchDatajButtonActionPerformed(evt);
            }
            
        }else if (response == JOptionPane.CANCEL_OPTION){   //ΕΠΙΛΟΓΗ CANCEL
        }else if (response == JOptionPane.CLOSED_OPTION){   //ΕΠΙΛΟΓΗ ΕΞΟΔΟΥ JOPTION
        }
        
    }//GEN-LAST:event_deleteAlljButtonActionPerformed

    private void plotjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotjButtonActionPerformed
        //ΔΗΜΙΟΥΡΓΙΑ ΑΝΤΙΚΕΙΜΕΝΟΥ PlotMaker ΚΑΙ ΕΜΦΑΝΙΣΗ ΤΟΥ ΣΤΟ ΚΕΝΤΡΟ    
        plot = new PlotMaker("Economic Data for " + 
            country.getName(), allCountryData, cDatasets);
        plot.pack();
        RefineryUtilities.centerFrameOnScreen(plot);
        plot.setVisible(true);
           
    }//GEN-LAST:event_plotjButtonActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        //ΚΛΕΙΣΙΜΟ ΔΙΑΓΡΑΜΜΑΤΟΣ ΟΤΑΝ ΕΣΤΙΑΖΟΥΜΕ ΣΤΗΝ ΚΕΝΤΡΙΚΗ ΦΟΡΜΑ ΤΗΣ ΕΦΑΡΜΟΓΗΣ
        if(plot!=null) {plot.dispose();}
    }//GEN-LAST:event_formWindowGainedFocus

    
    //ΔΙΑΔΙΚΑΣΙΑ ΕΡΩΤΗΣΗΣ ΤΟΥ ΧΡΗΣΤΗ ΚΑΤΑ ΤΗΝ ΕΠΙΛΟΓΗ ΕΞΟΔΟΥ ΑΠΟ ΤΗΝ ΕΦΑΡΜΟΓΗ
    private void ExitOnCloseOption () {
        Object[] options = {"OK", "Άκυρο"};
        
        int result = JOptionPane.showOptionDialog(this,
                "Θέλετε να γίνει τερματισμός της εφαρμογής;", "Έξοδος", 
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
        
        if (result == JOptionPane.YES_OPTION)
            System.exit(0);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EconometricaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EconometricaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EconometricaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EconometricaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                
                EconometricaGUI econ = new EconometricaGUI();
                
                //ΕΜΦΑΝΙΣΗ ΠΑΡΑΘΥΡΟΥ ΣΤΟ ΚΕΝΤΡΟ
                RefineryUtilities.centerFrameOnScreen(econ);
                econ.setVisible(true);
            }
        });
           
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alreadySavedjCheckBox;
    private javax.swing.JLabel avTimespanjLabel;
    private javax.swing.JLabel avTimespanjLabel1;
    private javax.swing.JLabel countrySelectjLabel;
    private javax.swing.JComboBox<String> countryjComboBox;
    private javax.swing.JButton deleteAlljButton;
    private javax.swing.JButton fetchDatajButton;
    private javax.swing.JLabel gdpDatajLabel;
    private javax.swing.JTable gdpDatajTable;
    private javax.swing.JLabel gdpDatasetNameTitlejLabel;
    private javax.swing.JLabel gdpDatasetNamejlabel;
    private javax.swing.JLabel gdpEndDateTitlejLabel;
    private javax.swing.JLabel gdpEndDatejlabel;
    private javax.swing.JLabel gdpStartDateTitlejLabel;
    private javax.swing.JLabel gdpStartDatejlabel;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel oilDatajLabel;
    private javax.swing.JTable oilDatajTable;
    private javax.swing.JLabel oilDatasetNameTitlejLabel;
    private javax.swing.JLabel oilDatasetNamejlabel;
    private javax.swing.JLabel oilEndDateTitlejLabel;
    private javax.swing.JLabel oilEndDatejlabel;
    private javax.swing.JLabel oilStartDateTitlejLabel;
    private javax.swing.JLabel oilStartDatejlabel;
    private javax.swing.JButton plotjButton;
    private javax.swing.JButton savejButton;
    // End of variables declaration//GEN-END:variables
}
